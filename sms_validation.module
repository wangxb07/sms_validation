<?php

/**
 * @file
 * SMS validation module file
 */

/**
 * const for user validated
 */
define('SMS_VALIDATION_BLOCKED', 0);
define('SMS_VALIDATION_ACTIVE', 1);

/**
 * Implements hook_admin_paths().
 */
function sms_validation_admin_paths() {
  return array(
    'user/*/sms_validation' => TRUE,
  );
}

/**
 * Implementation of hook_menu().
 */
function sms_validation_menu() {
  $items = array();
  $items['user/%user/sms_validation'] = array(
    'title' => 'SMS Validation',
    'description' => 'User validation by SMS',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sms_validation_form', 1),
    'access arguments' => array('validate user sms'),
  );
  return $items;
}

/**
 * Implement hook_permission().
 */
function sms_validation_permission() {
  return array(
    'validate user sms' => array(
      'description' => t('Validate by sms.'),
      'title' => t('validate sms'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * user validate form build
 */
function sms_validation_form_build($parent_form = NULL) {
  $form['mobile'] = array(
    '#type' => 'textfield',
    '#title' => t('Mobile'),
    '#required' => TRUE,
    '#description' => t('Please input your real mobile phone number.'),
    '#element_validate' => array('sms_validation_mobile_validate'),
  );

  $form['validate'] = array(
    '#type' => 'container',
    '#prefix' => '<div id="validate-container">',
    '#suffix' => '</div>',
  );

  $form['validate']['code'] = array(
    '#type' => 'textfield',
    '#title' => t('Code'),
    '#description' => t('Please input the code that you received.'),
    '#required' => TRUE,
  );

  $form['validate']['send_code'] = array(
    '#type' => 'button',
    '#value' => t('Send'),
    '#ajax' => array(
      'callback' => 'sms_validation_send_callback',
      'wrapper' => 'validate-container',
    )
  );

  if ($parent_form != NULL) {
    //$form['validate']['send_code']['#validate'] = array('sms_validation_form_validate');
    $form['validate']['send_code']['#submit'] = array();
    $form['validate']['send_code']['#limit_validation_errors'] = array(
      array('mobile')
    );
  }

  if ($parent_form === NULL) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );
  }

  return $form;
}

/**
 * User validate form
 */
function sms_validation_form($form, &$form_state, $user) {
  if (!sms_validation_is_active($user->uid)) {
    return sms_validation_form_build();
  }
  else {
    $form['markup'] = array(
      '#type' => 'markup',
      '#markup' => t('user already active.'),
    );
    return $form;
  }
}

/**
 * mobile form element validate
 */
function sms_validation_mobile_validate($form, &$form_state) {
  global $user;
  if ($form_state['clicked_button']['#value'] == t('Send')) {
    $mobile = $form_state['values']['mobile'];
    if ($mobile) {
      if (strlen($mobile) != 11 || !is_numeric($mobile)) {
        form_set_error('mobile', t('Mobile number not right.'));
        return FALSE;
      }
      //TODO check the mobile number is used by other customer.
      $mobile_existed = db_select('sms_validation', 'sv')
        ->fields('sv', array('svid', 'uid'))
        ->condition('mobile', $mobile)->execute()->fetchAssoc();
      if (!empty($mobile_existed)) {
        if ($mobile_existed['uid'] != $user->uid && $mobile_existed['uid'] != 0) {
          form_set_error('mobile', t('Mobile number created by other customer.'));
          return FALSE;
        }
      }

      $code = _sms_validation_generate_code();
      $message = t('validate code: @code', array('@code' => $code));
      sms_validation_save(array(
          'uid' => $user->uid,
          'code' => $code,
          'mobile' => $mobile,
        ));
      if (china_sms_send($message, $mobile)) {
        $form_state['send_success'] = TRUE;
        drupal_set_message(t('Validation code send success'), 'status');
      }
      else {
        drupal_set_message(t('Validation code send failure'), 'error');
      }
    }
    else {
      form_set_error('mobile', t('Mobile is required.'));
    }
  }
}

/**
 * Implements hook_ctools_plugin_directory()
 */
function sms_validation_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Validation for sms form.
 */
function sms_validation_form_validate($form, &$form_state) {
  global $user;

  $form_state['send_success'] = FALSE;

  if ($form_state['clicked_button']['#value'] != t('Send')) {
    // check user input validation code.
    $code = $form_state['values']['code'];
    $mobile = $form_state['values']['mobile'];
    if (empty($code)) {
      form_set_error('code', t('code is required'));
    }

    if (!empty($mobile) && !empty($code)) {
      $result = db_select('sms_validation', 'sv')
        ->fields('sv', array('code', 'mobile', 'updated', 'status'))
        ->condition('code', $code)
        ->condition('mobile', $mobile)
          //->condition('status', SMS_VALIDATION_BLOCKED)
        ->condition('updated', time() - 1200, '>')
        ->execute();
      $row = $result->fetchObject();

      if (empty($row->updated)) {
        form_set_error('code', t('Code not right, or expired'));
      }
    }
  }
}

/**
 * Submit handler for sms form.
 */
function sms_validation_form_submit($form, &$form_state) {
  global $user;
  // set user status to validated mode.
  $code = $form_state['values']['code'];
  $mobile = $form_state['values']['mobile'];

  sms_validation_save(array(
      'mobile' => $mobile,
      'code' => $code,
      'status' => SMS_VALIDATION_ACTIVE,
    ));

  drupal_set_message(t('Your account actived'), 'info');
  drupal_goto();
}

/**
 * Ajax callback
 */
function sms_validation_send_callback(&$form, &$form_state) {
  if (isset($form['validate'])) {
    $element = $form['validate'];
  }
  else {
    $element = $form['account']['sms_validation']['validate'];
  }
  return $element;
}

/**
 * Generate random code for validation
 */
function _sms_validation_generate_code($length = 6) {
  $nums = array();
  for ($i = 0; $i < $length; $i ++) {
    $nums[$i] = rand(0, 9);
  }
  return implode('', $nums);
}

/**
 * Insert sms validate information to database
 */
function sms_validation_save($data) {
  $data['updated'] = time();
  return db_merge('sms_validation')
    ->key(array('mobile' => $data['mobile']))
    ->fields($data)
    ->execute();
}

/**
 * get mobile by uid
 */
function sms_validation_get_mobile($uid) {
  $query = db_select('sms_validation', 's')
    ->fields('s', array('mobile'))
    ->condition('uid', $uid);
  $result = $query->execute()->fetchAssoc();
  if (isset($result['mobile'])) {
    return $result['mobile'];
  }
  return FALSE;
}

/**
 * Determine whether the user verification
 * @param $uid
 * @return
 *  boolean
 */
function sms_validation_is_active($uid) {
  if ($uid == 0) {
    return FALSE;
  }
  $result = db_select('sms_validation', 'sv')
    ->fields('sv', array('status'))
    ->condition('uid', $uid)
    ->condition('status', SMS_VALIDATION_ACTIVE)
    ->execute();
  $row = $result->fetchObject();
  return !empty($row->status);
}

/**
 * Implements hook_form_alter()
 */
function sms_validation_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_register_form') {
    $admin = user_access('administer users');
    if (!$admin) {
      $form['account']['sms_validation'] = sms_validation_form_build($form_id);
      $form['account']['sms_validation']['#type'] = 'container';
      $form['account']['sms_validation']['#weight'] = 0;

      $form['#validate'][] = 'sms_validation_form_validate';
      $form['actions']['submit']['#limit_validation_errors'] = FALSE;
    }
  }
}

/**
 * Implements hook_user_insert();
 */
function sms_validation_user_insert(&$edit, $account, $category) {
  if (!empty($edit['code']) || !empty($edit['mobile'])) {
    // set user status to validated mode.
    $code = $edit['code'];
    $mobile = $edit['mobile'];

    sms_validation_save(array(
        'uid' => $account->uid,
        'mobile' => $mobile,
        'code' => $code,
        'status' => SMS_VALIDATION_ACTIVE,
      ));
  }
}

/**
 * Impelements hook_user_delete($account)
 */
function sms_validation_user_delete($account) {
  db_delete('sms_validation')->condition('uid', $account->uid)->execute();
}

// TODO 下面这部分属于硬编码，预期目标是，可以设置哪些字段默认赋值手机号码。
function sms_validation_field_widget_form_alter(&$element, &$form_state, $context) {
  global $user;

  if (sms_validation_is_active($user->uid)) {
    if ($element['#field_name'] == 'field_mobile') {
      $element['value']['#default_value'] = sms_validation_get_mobile($user->uid);
    }
  }
}
